// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: slam.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Slam {

  /// <summary>Holder for reflection information generated from slam.proto</summary>
  public static partial class SlamReflection {

    #region Descriptor
    /// <summary>File descriptor for slam.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SlamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpzbGFtLnByb3RvEgRzbGFtGgpkYXRhLnByb3RvIlUKDFRyYWNrUmVxdWVz",
            "dBIdCgVmcmFtZRgCIAEoCzIJLlBOR0ZyYW1lSACIAQESEgoFcmVzZXQYAyAB",
            "KAhIAYgBAUIICgZfZnJhbWVCCAoGX3Jlc2V0Il0KC1RyYWNrUmVzdWx0EhcK",
            "BmNhbWVyYRgBIAEoCzIHLkNhbWVyYRIWCgZwb2ludHMYAiADKAsyBi5Qb2lu",
            "dBIdCgVzdGF0ZRgDIAEoDjIOLlRyYWNraW5nU3RhdGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::DataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Slam.TrackRequest), global::Slam.TrackRequest.Parser, new[]{ "Frame", "Reset" }, new[]{ "Frame", "Reset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Slam.TrackResult), global::Slam.TrackResult.Parser, new[]{ "Camera", "Points", "State" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TrackRequest : pb::IMessage<TrackRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackRequest> _parser = new pb::MessageParser<TrackRequest>(() => new TrackRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Slam.SlamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackRequest(TrackRequest other) : this() {
      _hasBits0 = other._hasBits0;
      frame_ = other.frame_ != null ? other.frame_.Clone() : null;
      reset_ = other.reset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackRequest Clone() {
      return new TrackRequest(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private global::PNGFrame frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PNGFrame Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "reset" field.</summary>
    public const int ResetFieldNumber = 3;
    private bool reset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reset {
      get { if ((_hasBits0 & 1) != 0) { return reset_; } else { return false; } }
      set {
        _hasBits0 |= 1;
        reset_ = value;
      }
    }
    /// <summary>Gets whether the "reset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReset {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "reset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReset() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Frame, other.Frame)) return false;
      if (Reset != other.Reset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frame_ != null) hash ^= Frame.GetHashCode();
      if (HasReset) hash ^= Reset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (frame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Frame);
      }
      if (HasReset) {
        output.WriteRawTag(24);
        output.WriteBool(Reset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (frame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Frame);
      }
      if (HasReset) {
        output.WriteRawTag(24);
        output.WriteBool(Reset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Frame);
      }
      if (HasReset) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackRequest other) {
      if (other == null) {
        return;
      }
      if (other.frame_ != null) {
        if (frame_ == null) {
          Frame = new global::PNGFrame();
        }
        Frame.MergeFrom(other.Frame);
      }
      if (other.HasReset) {
        Reset = other.Reset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (frame_ == null) {
              Frame = new global::PNGFrame();
            }
            input.ReadMessage(Frame);
            break;
          }
          case 24: {
            Reset = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (frame_ == null) {
              Frame = new global::PNGFrame();
            }
            input.ReadMessage(Frame);
            break;
          }
          case 24: {
            Reset = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TrackResult : pb::IMessage<TrackResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackResult> _parser = new pb::MessageParser<TrackResult>(() => new TrackResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Slam.SlamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackResult(TrackResult other) : this() {
      camera_ = other.camera_ != null ? other.camera_.Clone() : null;
      points_ = other.points_.Clone();
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackResult Clone() {
      return new TrackResult(this);
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 1;
    private global::Camera camera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Camera Camera {
      get { return camera_; }
      set {
        camera_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(18, global::Point.Parser);
    private readonly pbc::RepeatedField<global::Point> points_ = new pbc::RepeatedField<global::Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Point> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::TrackingState state_ = global::TrackingState.NoImagesYet;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TrackingState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Camera, other.Camera)) return false;
      if(!points_.Equals(other.points_)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (camera_ != null) hash ^= Camera.GetHashCode();
      hash ^= points_.GetHashCode();
      if (State != global::TrackingState.NoImagesYet) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (camera_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Camera);
      }
      points_.WriteTo(output, _repeated_points_codec);
      if (State != global::TrackingState.NoImagesYet) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (camera_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Camera);
      }
      points_.WriteTo(ref output, _repeated_points_codec);
      if (State != global::TrackingState.NoImagesYet) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (camera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      if (State != global::TrackingState.NoImagesYet) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackResult other) {
      if (other == null) {
        return;
      }
      if (other.camera_ != null) {
        if (camera_ == null) {
          Camera = new global::Camera();
        }
        Camera.MergeFrom(other.Camera);
      }
      points_.Add(other.points_);
      if (other.State != global::TrackingState.NoImagesYet) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (camera_ == null) {
              Camera = new global::Camera();
            }
            input.ReadMessage(Camera);
            break;
          }
          case 18: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 24: {
            State = (global::TrackingState) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (camera_ == null) {
              Camera = new global::Camera();
            }
            input.ReadMessage(Camera);
            break;
          }
          case 18: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
          case 24: {
            State = (global::TrackingState) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
